SET DEFINE OFF;
CREATE OR REPLACE PACKAGE XX_PO_WF_PO_CHARGE_ACC AS

--
-- IS_PO_PROJECT_RELATED
--
-- IN
--   itemtype  - A valid item type from (WF_ITEM_TYPES table).
--   itemkey   - A string generated by call to AOL's INITIALIZE routine.
--   actid     - ID no. of activity this process is called from.
--   funcmode  - Run/Cancel
-- OUT
--   Result
--     TRUE
--     FALSE
--


procedure is_po_project_related      (  itemtype        in  varchar2,
                             	        itemkey         IN  VARCHAR2,
	                     		actid           in number,
                             		funcmode        IN  VARCHAR2,
                             		result          out NOCOPY varchar2    );
            
PROCEDURE Get_PA_Exp_Account (itemtype        IN  VARCHAR2
  					,itemkey         IN  VARCHAR2
					  ,actid           IN  NUMBER
					  ,funcmode        IN  VARCHAR2
					  ,result          OUT VARCHAR2);
            
PROCEDURE Get_PA_Acc_Account (itemtype        IN  VARCHAR2
  					,itemkey         IN  VARCHAR2
					  ,actid           IN  NUMBER
					  ,funcmode        IN  VARCHAR2
					  ,result          OUT VARCHAR2);
            
             PROCEDURE debug_test (itemtype        IN  VARCHAR2
  					  ,itemkey         IN  VARCHAR2
					  ,actid           IN  NUMBER
					  ,funcmode        IN  VARCHAR2
					  ,result          OUT VARCHAR2) ;

PROCEDURE is_exp_acc_null (itemtype        IN  VARCHAR2
  					,itemkey         IN  VARCHAR2
					  ,actid           IN  NUMBER
					  ,funcmode        IN  VARCHAR2
					  ,result          OUT VARCHAR2);


--
-- Expense
--   Build expense charge account.
-- IN
--   itemtype  - A valid item type from (WF_ITEM_TYPES table).
--   itemkey   - A string generated by call to AOL's INITIALIZE routine.
--   funcmode  - Run/Cancel
-- OUT
--   Result
--     FAILURE - Account generation failed
--     SUCCESS - Account generation successful
--
procedure expense  ( itemtype        in  varchar2,
                     itemkey         in  varchar2,
	             actid           in number,
                     funcmode        IN  VARCHAR2,
                     result          out NOCOPY varchar2    );

/*

PROCEDURE Get_Account (itemtype        IN  VARCHAR2
  					,itemkey         IN  VARCHAR2
					  ,actid           IN  NUMBER
					  ,funcmode        IN  VARCHAR2
					  ,result          OUT VARCHAR2);

PROCEDURE Get_Accrual_Account (itemtype        IN  VARCHAR2
  					  		  ,itemkey         IN  VARCHAR2
					  		  ,actid           IN  NUMBER
					  		  ,funcmode        IN  VARCHAR2
					  		  ,result          OUT VARCHAR2);

PROCEDURE Insert_Fleet_Locations (ErrBuf OUT VARCHAR2
							   	 ,RetCode OUT NUMBER
								 ,p_job_fleet IN VARCHAR2
								 ,p_company IN VARCHAR2
								 ,p_location IN VARCHAR2
								 ,p_activity IN VARCHAR2 );

*/

PROCEDURE WriteLog (p_comments IN VARCHAR2
				   ,p_procedure_name IN VARCHAR2
				   ,p_progress IN VARCHAR2);

END XX_PO_WF_PO_CHARGE_ACC;
 
/


CREATE OR REPLACE PACKAGE BODY XX_PO_WF_PO_CHARGE_ACC AS
g_po_wf_debug VARCHAR2(1) := NVL(FND_PROFILE.VALUE('PO_SET_DEBUG_WORKFLOW_ON'),'N');
 /**********************************************************************
 DESCRIPTION
 PL/SQL body for package:  XX_PO_WF_PO_CHARGE_ACC.

 NOTES
 MODIFIED    S. Joyce (17-Feb-2012) - Created.
 ***********************************************************************/
 procedure is_po_project_related      (  itemtype        in  varchar2,
                             	        itemkey         IN  VARCHAR2,
                                      actid           IN NUMBER,
                             		     funcmode        IN  VARCHAR2,
                             		     result          out NOCOPY varchar2    )
is
	x_progress              varchar2(100);
l_project_id number;
gl_code number;
l_req_line_id varchar2(30);
l_proj varchar2(1);

begin

  x_progress := 'XX_PO_WF_PO_CHARGE_ACC.is_po_project_related: 01';
  
  
 l_project_id := wf_engine.GetItemAttrNumber(itemtype => itemtype
    	                             ,itemkey  => itemkey
                    	          	 ,aname    => 'PROJECT_ID');

  l_req_line_id := wf_engine.GetItemAttrText(itemtype => itemtype
    	                             ,itemkey  => itemkey
                    	          	 ,aname    => 'LINE_ATT7');

l_proj :='Y';

if itemtype <> 'POWFPOAG' then 
select decode(noncat_template_id,162,'Y',163,'Y',null,'Y','N')
into l_proj
from po_requisition_lines_all
where requisition_line_id = to_number(l_req_line_id);

end if;

    IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  po_wf_debug_pkg.insert_debug(itemtype,itemkey,'L_PROJECT_ID='||l_project_id);
                  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'L_req_line_id='||l_req_line_id);
     
    END IF;


 gl_code := po_wf_util_pkg.GetItemAttrNumber ( itemtype => itemtype,
                                   	         itemkey  => itemkey,
                            	 	         aname    => 'CODE_COMBINATION_ID');

      IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  po_wf_debug_pkg.insert_debug(itemtype,itemkey,'Current CODE_COMBINATION_ID='||gl_code);
      END IF;                                    


-- if project id is null and not-catalog template is not a tam one then 
IF l_project_id IS NULL or l_proj = 'N' THEN
	result := 'COMPLETE:F';
  
        IF (g_po_wf_debug = 'Y') THEN
        po_wf_debug_pkg.insert_debug(itemtype,itemkey,'XX_PO_WF_PO_CHARGE_ACC.is_po_project_related RESULT='||result);
        END IF;                                    
	RETURN;
END IF;

	result := 'COMPLETE:T';
  
  IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'XX_PO_WF_PO_CHARGE_ACC.is_po_project_related RESULT='||result);
     
     
  END IF;

  
	RETURN;
  
  EXCEPTION
  when others then
    	wf_core.context('XX_PO_WF_PO_CHARGE_ACC','check_destination_type',x_progress);

END is_po_project_related;

 PROCEDURE is_exp_acc_null (itemtype        IN  VARCHAR2
  					,itemkey         IN  VARCHAR2
					  ,actid           IN  NUMBER
					  ,funcmode        IN  VARCHAR2
					  ,result          OUT VARCHAR2) IS
            
     gl_code number;
     
     BEGIN
     gl_code := po_wf_util_pkg.GetItemAttrNumber ( itemtype => itemtype,
                                   	         itemkey  => itemkey,
                            	 	         aname    => 'CODE_COMBINATION_ID');
                                         
    
    IF gl_code IS NULL THEN
    result := 'COMPLETE:T';
  
    END IF;
	
  if gl_code is not null then
  result := 'COMPLETE:F';
  end if;
  
  IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'XX_PO_WF_PO_CHARGE_ACC.is_exp_acc_null RESULT='||result);
     
  END IF;

  
	RETURN;
  
end is_exp_acc_null;
            
 
 PROCEDURE debug_test (itemtype        IN  VARCHAR2
  					  ,itemkey         IN  VARCHAR2
					  ,actid           IN  NUMBER
					  ,funcmode        IN  VARCHAR2
					  ,result          OUT VARCHAR2) IS
 gl_code number;
 begin
 IF (g_po_wf_debug = 'Y') THEN
 po_wf_debug_pkg.insert_debug(itemtype,itemkey,'DEBUG STEP NOW');
 end if;
 
  gl_code := po_wf_util_pkg.GetItemAttrNumber ( itemtype => itemtype,
                                   	         itemkey  => itemkey,
                            	 	         aname    => 'CODE_COMBINATION_ID');
     IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'Current CODE_COMBINATION_ID='||gl_code);
     end if;
     
 end debug_test;
 
 
PROCEDURE Get_pa_exp_Account (itemtype        IN  VARCHAR2
  					  ,itemkey         IN  VARCHAR2
					  ,actid           IN  NUMBER
					  ,funcmode        IN  VARCHAR2
					  ,result          OUT VARCHAR2) IS

  CURSOR c_get_segments (b_fnd_flex_num NUMBER) IS
  SELECT application_column_name
  ,	   	 segment_name
  FROM   fnd_id_flex_segments--_vl
  WHERE  id_flex_num = b_fnd_flex_num;

  v_progress					VARCHAR2(100) := '000';
  v_fnd_flex_num 				number;
  v_segment1 				   	VARCHAR2(30);
  v_segment2 				   	VARCHAR2(30);
  v_segment3 				   	VARCHAR2(30);
  v_segment4 				   	VARCHAR2(30);
  v_segment5 				   	VARCHAR2(30);
  v_segment6 				   	VARCHAR2(30);
  v_segment7 				   	VARCHAR2(30);
  v_segment1_value				VARCHAR2(30);
  v_segment2_value				VARCHAR2(30);
  v_segment3_value				VARCHAR2(30);
  v_segment4_value				VARCHAR2(30);
  v_segment5_value				VARCHAR2(30);
  v_segment6_value				VARCHAR2(30);
  v_segment7_value				VARCHAR2(30);
  v_org_id						NUMBER;
  v_error						VARCHAR2(2000);
  l_project_id       number;
  l_expenditure_type varchar2(200);
  L_temp_id          NUMBER;
  x_progress	VARCHAR2(100);
	success		varchar2(2);

BEGIN

  g_po_wf_debug := 'Y';

 x_progress := 'XXPO_WF_PO_CHARGE_ACC.expense: 01';
  IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,x_progress);
  END IF;

  -- Do nothing in cancel or timeout mode
  --
  IF (funcmode <> wf_engine.eng_run) THEN
  
  

    result := wf_engine.eng_null;
    RETURN;

  END IF;

  -- Get the Org ID.
  SELECT to_number(decode(substrb(userenv('CLIENT_INFO'),1,1),
  		 ' ', null,substrb(userenv('CLIENT_INFO'),1,10)))
  INTO   v_org_id
  FROM   dual;

   IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'v_org_id ='||v_org_id);
  END IF;

  -- Get the CHART_OF_ACCOUNTS_ID item attribute, which is the ID for the Charge Account Flexfield.
  --v_fnd_flex_num := wf_engine.GetItemAttrNumber (itemtype => itemtype
   --     	                                  ,itemkey  => itemkey
    --            	            	          ,aname    => 'CHART_OF_ACCOUNTS_ID');
                                                                            
    v_fnd_flex_num := 50230;
    
    
 -- Get Project ID then return flexfield Attribute1 from Project to get MSN for segment 4
 -- Entity and Natural Account
  l_project_id := wf_engine.GetItemAttrNumber(itemtype => itemtype
        	                             ,itemkey  => itemkey
                        	          	 ,aname    => 'PROJECT_ID');
                                       
  l_expenditure_type := wf_engine.GetItemAttrText(itemtype => itemtype
        	                             ,itemkey  => itemkey
                        	          	 ,aname    => 'EXPENDITURE_TYPE');
    
  
  IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'Project_id ='||l_project_id);
  END IF;
  
  select segment_value
  into v_segment2_value
from pa_segment_value_lookups
where segment_value_lookup = l_expenditure_type
and segment_value_lookup_Set_id = 1;  
  
  if (g_po_wf_debug = 'Y') then
     /* DEBUG */  po_wf_debug_pkg.insert_debug(itemtype,itemkey,'Line 204');
  END IF;
                                       
  SELECT attribute1,
         attribute2,
         decode(v_segment2_value,'000000',attribute3,v_segment2_value),
         attribute4
  INTO v_segment4_value,
       v_segment1_value,
       v_segment2_value,
       v_segment5_value
  FROM pa_projects_all
  where project_id = l_project_id;
  
  if (g_po_wf_debug = 'Y') then
     /* DEBUG */  po_wf_debug_pkg.insert_debug(itemtype,itemkey,'Line 219');
  end if;
  
  IF v_segment2_value = '000000' THEN
       v_segment3_value := NULL;
       v_segment2_value := NULL; 
  END IF;
  
  if (g_po_wf_debug = 'Y') then
     /* DEBUG */  po_wf_debug_pkg.insert_debug(itemtype,itemkey,'Line 228');
  end if;
  
  
  if v_segment2_value BETWEEN '000001' AND '399999'
      then v_segment3_value := '0000';
      ELSE 
          v_segment3_value := '1100';
      END IF;
  
  if (g_po_wf_debug = 'Y') then
     /* DEBUG */  po_wf_debug_pkg.insert_debug(itemtype,itemkey,'Line 239');
  end if;
  
  
   -- set cost centre to 2006 if P&L account and charged to a project
  IF (l_project_id is not null and v_segment2_value between '400000' and '599999') THEN
       
       v_segment3_value := '2006';
  END IF;
  
  if (g_po_wf_debug = 'Y') then
     /* DEBUG */  po_wf_debug_pkg.insert_debug(itemtype,itemkey,'Line 250');
  end if;
  
  
  if v_segment2_value = 577580 and v_segment1_value = '1801' then 
    v_segment3_value := '2006';
  end if;
  
  if (g_po_wf_debug = 'Y') then
     /* DEBUG */  po_wf_debug_pkg.insert_debug(itemtype,itemkey,'Line 259');
  end if;
  
  
  if v_segment2_value = 577580 and v_segment1_value = '1802' then 
    v_segment3_value := '1006';
  end if;
  
 if (g_po_wf_debug = 'Y') then
     /* DEBUG */  po_wf_debug_pkg.insert_debug(itemtype,itemkey,'Line 268');
  end if;
  
 
  -- set leasee field to 000 if capex 159005 
  if v_segment2_value = '159005' then
  v_segment5_value := '000';
  end if;
  
  if (g_po_wf_debug = 'Y') then
     /* DEBUG */  po_wf_debug_pkg.insert_debug(itemtype,itemkey,'Line 278');
  end if;
  
  v_segment7_value := '0000';
  
 
  IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'v_segment1_value= '||v_segment1_value);
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'v_segment2_value= '||v_segment2_value);
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'v_segment3_value= '||v_segment3_value);
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'v_segment4_value= '||v_segment4_value);
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'v_segment5_value= '||v_segment5_value);
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'v_segment6_value= '||v_segment1_value);
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'v_segment7_value= '||v_segment7_value);
  END IF;  
  

  -- Get the names of the Segments that need to be changed.
  -- Do this instead of defaulting the values in Workflow builder, as they could change in the future.
  FOR i IN c_get_segments (v_fnd_flex_num) LOOP

    IF i.application_column_name = 'SEGMENT1' THEN
	  -- The value of v_segment1 = ENT.
	  v_segment1 := i.segment_name;
	ELSIF i.application_column_name = 'SEGMENT2' THEN
	  -- The value of v_segment2 = ACC.
	  v_segment2 := i.segment_name;
	ELSIF i.application_column_name = 'SEGMENT3' THEN
	  -- The value of v_segment3 = CC.
	  v_segment3 := i.segment_name;
	ELSIF i.application_column_name = 'SEGMENT4' THEN
		  -- The value of v_segment4 = MSN/ESN.
	  v_segment4 := i.segment_name;
	ELSIF i.application_column_name = 'SEGMENT5' THEN
	  -- The value of v_segment5 = LE.
	  v_segment5 := i.segment_name;
  ELSIF i.application_column_name = 'SEGMENT6' THEN
	  -- The value of v_segment5 = IC.
	  v_segment6 := i.segment_name;
  ELSIF i.application_column_name = 'SEGMENT7' THEN
	  -- The value of v_segment5 = SP.
	  v_segment7 := i.segment_name;
	
	
	ELSE
	  NULL;
	END IF;

  END LOOP;
 
  IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'xx_po_wf_po_charge_account line 198');
     
  END IF;  

  -- Set the Workflow item attribute TEMP_ACCOUNT_ID to the Employee's
  -- default expense account (Employee is derived from PREPARER_ID item attribute) .
  
  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT1'
							,avalue	  => v_segment1 );

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT2'
							,avalue	  => v_segment2 );


  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT3'
							,avalue	  => v_segment3 );

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT4'
							,avalue	  => v_segment4 );


  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT5'
							,avalue	  => v_segment5 );
  
  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT6'
							,avalue	  => v_segment6 );
              
  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT7'
							,avalue	  => v_segment7 );

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT1_VALUE'
							,avalue	  => v_segment1_value );

if v_segment2_value is not null then
  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT2_VALUE'
							,avalue	  => v_segment2_value );
end if;

if v_segment3_value is not null then
  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT3_VALUE'
							,avalue	  => v_segment3_value );
END IF;


  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT4_VALUE'
							,avalue	  => v_segment4_value );

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT5_VALUE'
							,avalue	  => v_segment5_value );
              
  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT6_VALUE'
							,avalue	  => v_segment1_value ); --  set IC same as Ent
  
  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT7_VALUE'
							,avalue	  => v_segment7_value ); 

IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'xx_po_wf_po_charge_account line 277');
     
  END IF;  



  result := 'COMPLETE:S';
  
  IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'xx_po_wf_po_charge_account result='||result);
     
  END IF;  
  RETURN;

EXCEPTION
  WHEN NO_DATA_FOUND THEN
	    success := 'N';
      
  WHEN OTHERS THEN
  v_error := sqlerrm;
  
   IF (g_po_wf_debug = 'Y') THEN
      po_wf_debug_pkg.insert_debug(itemtype, itemkey,
             'XX_PO_WF_PO_CHARGE_ACC.expense sqlerror='|| v_error);
    END IF;

  writelog(v_error, 'XX_PO_WF_PO_CHARGE_ACC.Get_PA_EXP_Account', v_progress);
	wf_core.context('XX_PO_WF_PO_CHARGE_ACC','Get_PA_EXP_Account',v_progress);
  RAISE;

END Get_PA_Exp_Account;

PROCEDURE Get_pa_Acc_Account (itemtype        IN  VARCHAR2
  					  ,itemkey         IN  VARCHAR2
					  ,actid           IN  NUMBER
					  ,funcmode        IN  VARCHAR2
					  ,result          OUT VARCHAR2) IS

  CURSOR c_get_segments (b_fnd_flex_num NUMBER) IS
  SELECT application_column_name
  ,	   	 segment_name
  FROM   fnd_id_flex_segments--_vl
  WHERE  id_flex_num = b_fnd_flex_num;

  v_progress					VARCHAR2(100) := '000';
  v_fnd_flex_num 				number;
  v_segment1 				   	VARCHAR2(30);
  v_segment2 				   	VARCHAR2(30);
  v_segment3 				   	VARCHAR2(30);
  v_segment4 				   	VARCHAR2(30);
  v_segment5 				   	VARCHAR2(30);
  v_segment6 				   	VARCHAR2(30);
  v_segment7 				   	VARCHAR2(30);
  v_segment1_value				VARCHAR2(30);
  v_segment2_value				VARCHAR2(30);
  v_segment3_value				VARCHAR2(30);
  v_segment4_value				VARCHAR2(30);
  v_segment5_value				VARCHAR2(30);
  v_segment6_value				VARCHAR2(30);
  v_segment7_value				VARCHAR2(30);
  v_org_id						NUMBER;
  v_error						VARCHAR2(2000);
  l_project_id       NUMBER;
  L_temp_id          NUMBER;
  x_progress	VARCHAR2(100);
	success		VARCHAR2(2);
  v_charge_account_id NUMBER;
  

BEGIN
                            
  x_progress := 'XXPO_WF_PO_CHARGE_ACC.accrual: 01';
  
  IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,x_progress);
  END IF;

  -- Do nothing in cancel or timeout mode
  --
    IF (funcmode <> wf_engine.eng_run) THEN
        
          result := wf_engine.eng_null;
          RETURN;

    END IF;

  
  -- Get the Org ID.
  SELECT to_number(decode(substrb(userenv('CLIENT_INFO'),1,1),
  		 ' ', null,substrb(userenv('CLIENT_INFO'),1,10)))
  INTO   v_org_id
  FROM   dual;

  IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'v_org_id ='||v_org_id);
  END IF;

  -- Get the CHART_OF_ACCOUNTS_ID item attribute, which is the ID for the Charge Account Flexfield.
  --v_fnd_flex_num := wf_engine.GetItemAttrNumber (itemtype => itemtype
   --     	                                  ,itemkey  => itemkey
    --            	            	          ,aname    => 'CHART_OF_ACCOUNTS_ID');
                                                                            
    v_fnd_flex_num := 50230;
    
    
 -- Get Project ID then return flexfield Attribute1 from Project to get MSN for segment 4
 -- Entity and Natural Account
  l_project_id := wf_engine.GetItemAttrNumber(itemtype => itemtype
        	                             ,itemkey  => itemkey
                        	          	 ,aname    => 'PROJECT_ID');
    v_charge_account_id := wf_engine.GetItemAttrNumber(itemtype => itemtype
        	                             ,itemkey  => itemkey
                        	          	 ,aname    => 'CODE_COMBINATION_ID');
    
      
  IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'Project_id ='||l_project_id);
                  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'charge_account_id= '||v_charge_account_id);
  END IF;
  
 
 if l_project_id is null then
 
 select segment1,
        segment4,
        segment5
  into v_segment1_value,
       v_segment4_value,
       v_segment5_value
  from gl_code_combinations
  where code_combination_id = v_charge_account_id;
  
  else
                                       
  SELECT attribute1,
         attribute2,
         attribute3,
         attribute4
  INTO v_segment4_value,
       v_segment1_value,
       v_segment2_value,
       v_segment5_value
  FROM pa_projects_all
  where project_id = l_project_id;
  
  end if;
 
  v_segment2_value := '212025';
  v_segment7_value := '0000';
  
 if v_segment2_value BETWEEN '000001' AND '399999' 
    then v_segment3_value := '0000';
      ELSE 
          V_SEGMENT3_VALUE := '1100';
      END IF;
 
  IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'v_segment1_value= '||v_segment1_value);
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'v_segment2_value= '||v_segment2_value);
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'v_segment3_value= '||v_segment3_value);
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'v_segment4_value= '||v_segment4_value);
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'v_segment5_value= '||v_segment5_value);
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'v_segment6_value= '||v_segment1_value);
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'v_segment7_value= '||v_segment7_value);
  END IF;    
  

  -- Get the names of the Segments that need to be changed.
  -- Do this instead of defaulting the values in Workflow builder, as they could change in the future.
  FOR i IN c_get_segments (v_fnd_flex_num) LOOP

    IF i.application_column_name = 'SEGMENT1' THEN
	  -- The value of v_segment1 = ENT.
	  v_segment1 := i.segment_name;
	ELSIF i.application_column_name = 'SEGMENT2' THEN
	  -- The value of v_segment2 = ACC.
	  v_segment2 := i.segment_name;
	ELSIF i.application_column_name = 'SEGMENT3' THEN
	  -- The value of v_segment3 = CC.
	  v_segment3 := i.segment_name;
	ELSIF i.application_column_name = 'SEGMENT4' THEN
		  -- The value of v_segment4 = MSN/ESN.
	  v_segment4 := i.segment_name;
	ELSIF i.application_column_name = 'SEGMENT5' THEN
	  -- The value of v_segment5 = LE.
	  v_segment5 := i.segment_name;
  ELSIF i.application_column_name = 'SEGMENT6' THEN
	  -- The value of v_segment5 = IC.
	  v_segment6 := i.segment_name;
  ELSIF i.application_column_name = 'SEGMENT7' THEN
	  -- The value of v_segment5 = SP.
	  v_segment7 := i.segment_name;
	
	
	ELSE
	  NULL;
	END IF;

  END LOOP;
 
  IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'xx_po_wf_po_accrual_account line 458');
     
  END IF;  

  -- Set the Workflow item attribute TEMP_ACCOUNT_ID to the Employee's
  -- default expense account (Employee is derived from PREPARER_ID item attribute) .
  
  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT1'
							,avalue	  => v_segment1 );

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT2'
							,avalue	  => v_segment2 );

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT3'
							,avalue	  => v_segment3 );

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT4'
							,avalue	  => v_segment4 );


  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT5'
							,avalue	  => v_segment5 );
  
  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT6'
							,avalue	  => v_segment6 );
              
  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT7'
							,avalue	  => v_segment7 );

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT1_VALUE'
							,avalue	  => v_segment1_value );

  if v_segment2_value is not null then
  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT2_VALUE'
							,avalue	  => v_segment2_value );
  end if;

  if v_segment3_value is not null then
  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT3_VALUE'
							,avalue	  => v_segment3_value );
  END IF;

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT4_VALUE'
							,avalue	  => v_segment4_value );

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT5_VALUE'
							,avalue	  => v_segment5_value );
              
  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT6_VALUE'
							,avalue	  => v_segment1_value ); --  set IC same as Ent
  
  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT7_VALUE'
							,avalue	  => v_segment7_value ); -- set IC same as Ent

IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'xx_po_wf_po_accrual_account line 537');
     
  END IF;  



  result := 'COMPLETE:S';
  
  IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,'xx_po_wf_po_accrual_account result='||result);
     
  END IF;  
  RETURN;

EXCEPTION
  WHEN NO_DATA_FOUND THEN
	    success := 'N';
      
  WHEN OTHERS THEN
  v_error := sqlerrm;
  
   IF (g_po_wf_debug = 'Y') THEN
      po_wf_debug_pkg.insert_debug(itemtype, itemkey,
             'XX_PO_WF_PO_CHARGE_ACC.expense sqlerror='|| v_error);
    END IF;

  writelog(v_error, 'XX_PO_WF_PO_CHARGE_ACC.Get_PA_EXP_Account', v_progress);
	wf_core.context('XX_PO_WF_PO_CHARGE_ACC','Get_PA_EXP_Account',v_progress);
  RAISE;

END Get_PA_Acc_Account;


/*PROCEDURE Get_Account (itemtype        IN  VARCHAR2
  					  ,itemkey         IN  VARCHAR2
					  ,actid           IN  NUMBER
					  ,funcmode        IN  VARCHAR2
					  ,result          OUT VARCHAR2) IS

  CURSOR c_get_segments (b_fnd_flex_num NUMBER) IS
  SELECT application_column_name
  ,	   	 segment_name
  FROM   fnd_id_flex_segments--_vl
  WHERE  id_flex_num = b_fnd_flex_num;

  CURSOR c_get_employee_ccid (b_preparer_id NUMBER) IS
  SELECT default_code_comb_id
  FROM 	 per_all_assignments_f
  WHERE  person_id = b_preparer_id;

  CURSOR C_job_fleet_exists (b_org_id NUMBER, b_job_fleet VARCHAR2) IS
  SELECT location
  ,		 activity
  FROM	 XXCRH_JOB_FLEET_LIST
  WHERE	 org_id = b_org_id
  AND	 job_fleet = b_job_fleet;

  v_progress					VARCHAR2(100) := '000';
  v_fnd_flex_num 				VARCHAR2(25);
  v_account       				NUMBER := NULL;
  v_preparer_id					NUMBER;
  v_segment1 				   	VARCHAR2(30);
  v_segment2 				   	VARCHAR2(30);
  v_segment3 				   	VARCHAR2(30);
  v_segment4 				   	VARCHAR2(30);
  v_segment5 				   	VARCHAR2(30);
  v_po_type						VARCHAR2(30);
  v_segment2_value				VARCHAR2(30);
  v_segment3_value				VARCHAR2(30);
  v_segment4_value				VARCHAR2(30);
  v_segment5_value				VARCHAR2(30);
  v_job_fleet_exists			VARCHAR2(1);
  v_org_id						NUMBER;
  v_error						VARCHAR2(2000);

BEGIN

  -- Do nothing in cancel or timeout mode
  --
  IF (funcmode <> wf_engine.eng_run) THEN

    result := wf_engine.eng_null;
    RETURN;

  END IF;

  -- Get the Org ID.
  SELECT to_number(decode(substrb(userenv('CLIENT_INFO'),1,1),
  		 ' ', null,substrb(userenv('CLIENT_INFO'),1,10)))
  INTO   v_org_id
  FROM   dual;

  v_preparer_id := wf_engine.GetItemAttrNumber (itemtype => itemtype
                                   	       	   ,itemkey  => itemkey
                            	 	          	   ,aname    => 'PREPARER_ID');

  -- Get the FND_FLEX_NUM item attribute, which is the ID for the Charge Account Flexfield.
  v_fnd_flex_num := wf_engine.GetItemAttrText (itemtype => itemtype
        	                                  ,itemkey  => itemkey
                	            	          ,aname    => 'FND_FLEX_NUM');

  v_po_type := wf_engine.GetItemAttrText (itemtype => itemtype
        	                             ,itemkey  => itemkey
                        	          	 ,aname    => 'TYPE_LOOKUP_CODE');


    v_segment4_value := wf_engine.GetItemAttrText (itemtype => itemtype
        	                               		  ,itemkey  => itemkey
                        	          	   		  ,aname    => 'LINE_ATT7');



  -- If the PO type is Standard, take the values for Segment3 and Segment5 from the PO Lines DFF.
  IF v_po_type = 'STANDARD' THEN
    v_segment3_value := wf_engine.GetItemAttrText (itemtype => itemtype
        	                               		  ,itemkey  => itemkey
                        	          	   		  ,aname    => 'LINE_ATT6');


    v_segment5_value := wf_engine.GetItemAttrText (itemtype => itemtype
        	                               		  ,itemkey  => itemkey
                        	          	   		  ,aname    => 'LINE_ATT5');


    v_segment2_value := wf_engine.GetItemAttrText (itemtype => itemtype
        	                               		  ,itemkey  => itemkey
                        	          	   		  ,aname    => 'LINE_ATT4');



  -- If the PO type is Blanket, take the values for Segment3 and Segment5 from the PO Line Locations DFF.
  ELSIF v_po_type = 'BLANKET' THEN
    v_segment3_value := wf_engine.GetItemAttrText (itemtype => itemtype
        	                             	   	  ,itemkey  => itemkey
                        	          	 	   	  ,aname    => 'SHIPMENT_ATT1');

    v_segment5_value := wf_engine.GetItemAttrText (itemtype => itemtype
        	                             	   	  ,itemkey  => itemkey
                        	          	 	   	  ,aname    => 'SHIPMENT_ATT2');
  END IF;

  -- Initialise variable v_job_fleet_exists.
  v_job_fleet_exists := 'N';

  -- If the job/fleet chosen on the PO Line exists in the custom table, location and activity must be set to the
  -- location and activity from the custom table.
  --
  --
  -- Change Control CC078
  -- Don't reference the XXCRH_JOB_FLEET_LIST table when v_segment5_value is set to '000000'
  --
  IF v_segment5_value != '000000' THEN
	  FOR r_job_fleet_exists IN C_job_fleet_exists (v_org_id, v_segment5_value) LOOP

	    v_job_fleet_exists := 'Y';
	----	v_segment2_value := r_job_fleet_exists.location;
		v_segment3_value := r_job_fleet_exists.activity;

	  END LOOP;
  END IF;

  -- Get the default account for the employee.
  OPEN c_get_employee_ccid (v_preparer_id);
  FETCH c_get_employee_ccid
  INTO v_account;
  CLOSE c_get_employee_ccid;

  -- Get the names of the Segments that need to be changed.
  -- Do this instead of defaulting the values in Workflow builder, as they could change in the future.
  FOR i IN c_get_segments (v_fnd_flex_num) LOOP

    IF i.application_column_name = 'SEGMENT1' THEN
	  -- The value of v_segment1 = COMPANY.
	  v_segment1 := i.segment_name;
	ELSIF i.application_column_name = 'SEGMENT2' THEN
	  -- The value of v_segment2 = LOCATION.
	  v_segment2 := i.segment_name;
	ELSIF i.application_column_name = 'SEGMENT3' THEN
	  -- The value of v_segment3 = ACTIVITY.
	  v_segment3 := i.segment_name;
	ELSIF i.application_column_name = 'SEGMENT4' THEN
		  -- The value of v_segment4 = ACCOUNT.
	  v_segment4 := i.segment_name;
	ELSIF i.application_column_name = 'SEGMENT5' THEN
	  -- The value of v_segment5 = JOB/FLEET.
	  v_segment5 := i.segment_name;
	ELSE
	  NULL;
	END IF;

  END LOOP;

  -- Set the Workflow item attribute TEMP_ACCOUNT_ID to the Employee's
  -- default expense account (Employee is derived from PREPARER_ID item attribute) .
  wf_engine.SetItemAttrNumber (itemtype => itemtype
  							  ,itemkey	=> itemkey
							  ,aname	=> 'TEMP_ACCOUNT_ID'
							  ,avalue	=> v_account );

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT1'
							,avalue	  => v_segment1 );

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT2'
							,avalue	  => v_segment2 );

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT3'
							,avalue	  => v_segment3 );

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT4'
							,avalue	  => v_segment4 );


  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT5'
							,avalue	  => v_segment5 );

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT2_VALUE'
							,avalue	  => v_segment2_value );

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT3_VALUE'
							,avalue	  => v_segment3_value );

  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT4_VALUE'
							,avalue	  => v_segment4_value );



  wf_engine.SetItemAttrText (itemtype => itemtype
  							,itemkey  => itemkey
							,aname	  => 'SEGMENT5_VALUE'
							,avalue	  => v_segment5_value );

  result := 'COMPLETE:SUCCESS';
  RETURN;

EXCEPTION
  WHEN OTHERS THEN
  v_error := sqlerrm;

  writelog(v_error, 'XXCRH_PO_WF_PO_CHARGE_ACC.Get_Account', v_progress);
	wf_core.context('XXCRH_PO_WF_PO_CHARGE_ACC','Get_Account',v_progress);
  RAISE;

END Get_Account;

PROCEDURE Get_Accrual_Account (itemtype        IN  VARCHAR2
  					  		  ,itemkey         IN  VARCHAR2
					  		  ,actid           IN  NUMBER
					  		  ,funcmode        IN  VARCHAR2
					  		  ,result          OUT VARCHAR2) IS

  CURSOR c_get_segments (b_fnd_flex_num NUMBER) IS
  SELECT segment_name
  FROM   fnd_id_flex_segments_vl
  WHERE  id_flex_num = b_fnd_flex_num
  AND	 application_column_name = 'SEGMENT4';

  CURSOR c_get_segment4_value (b_item_id NUMBER, b_org_id NUMBER) IS
  SELECT attribute1
  FROM 	 mtl_system_items
  WHERE  inventory_item_id = b_item_id
  AND	 UPPER(attribute_category) = 'PURCHASED ITEM'
  AND 	 organization_id = b_org_id;

  CURSOR c_get_master_org (b_dest_org_id NUMBER) IS
  SELECT master_organization_id
  FROM	 mtl_parameters
  WHERE  organization_id = b_dest_org_id;
  --
  --
  CURSOR C_po_lines(po_line_id IN NUMBER)
  IS
  SELECT	A.ATTRIBUTE7
  FROM		PO_LINES_ALL A
  WHERE		A.PO_LINE_ID = po_line_id;
  --
  --

  v_progress					VARCHAR2(100) := '000';
  v_fnd_flex_num 				VARCHAR2(25);
  v_account       				NUMBER := NULL;
  v_item_id						NUMBER;
  v_dest_org_id					NUMBER;
  v_error						VARCHAR2(2000);
  v_segment4					FND_ID_FLEX_SEGMENTS_VL.SEGMENT_NAME%TYPE;
  v_segment4_value				MTL_SYSTEM_ITEMS.ATTRIBUTE1%TYPE;
  r_get_master_org				c_get_master_org%ROWTYPE;
  v_po_line_id					NUMBER;
  v_CRH_PO_CUST_ACCRUAL_AC		varchar2(6);

BEGIN

  	  -- Do nothing in cancel or timeout mode
	  --
	  IF (funcmode <> wf_engine.eng_run)  THEN

	    result := wf_engine.eng_null;
	    RETURN;

	  END IF;

	  -- Get the FND_FLEX_NUM item attribute, which is the ID for the Charge Account Flexfield.
	  v_fnd_flex_num := wf_engine.GetItemAttrText (itemtype => itemtype
	        	                                  ,itemkey  => itemkey
	                	            	          ,aname    => 'FND_FLEX_NUM');

	  v_item_id := wf_engine.GetItemAttrNumber (itemtype => itemtype
	                               	       	   ,itemkey  => itemkey
	                          	 	       	   ,aname    => 'ITEM_ID');

	  v_dest_org_id := wf_engine.GetItemAttrNumber (itemtype => itemtype
	  		   	  							  	   ,itemkey  => itemkey
	                         	 	       	  	   ,aname    => 'DESTINATION_ORGANIZATION_ID');



	  -- Get the master_organization_id for the destination org.
	  OPEN c_get_master_org (v_dest_org_id);
	  FETCH c_get_master_org
	  INTO r_get_master_org;
	  CLOSE c_get_master_org;

	  -- Get the name of Segment4 that needs to be changed.
	  -- Do this instead of defaulting the values in Workflow builder, as it could change in the future.
	  OPEN c_get_segments (v_fnd_flex_num);
	  FETCH c_get_segments
	  INTO v_segment4;
	  CLOSE c_get_segments;

	  -- Get the value from the DFF on the Item screen for Segment4.
	  OPEN c_get_segment4_value (v_item_id, r_get_master_org.master_organization_id);
	  FETCH c_get_segment4_value
	  INTO v_segment4_value;
	  CLOSE c_get_segment4_value;
	  
	  
	  select FND_PROFILE.VALUE('CRH_PO_CUST_ACCRUAL_AC') INTO v_CRH_PO_CUST_ACCRUAL_AC FROM DUAL;
	  if nvl(v_CRH_PO_CUST_ACCRUAL_AC,'N') = 'N' then
	  	 v_segment4_value := null;
	  end if;

	  wf_engine.SetItemAttrText (itemtype => itemtype
	  							,itemkey  => itemkey
								,aname	  => 'SEGMENT4'
								,avalue	  => v_segment4 );

	  wf_engine.SetItemAttrText (itemtype => itemtype
	  							,itemkey  => itemkey
								,aname	  => 'SEGMENT4_VALUE'
								,avalue	  => v_segment4_value );

	  result := 'COMPLETE:SUCCESS';
	  RETURN;

EXCEPTION
  WHEN OTHERS THEN
  v_error := sqlerrm;
   writelog(v_error, 'XXCRH_PO_WF_PO_CHARGE_ACC.Get_Accrual_Account', v_progress);
	wf_core.context('XXCRH_PO_WF_PO_CHARGE_ACC','Get_Accrual_Account',v_progress);
  RAISE;

END Get_Accrual_Account;

PROCEDURE Insert_Fleet_Locations (ErrBuf OUT VARCHAR2
							   	 ,RetCode OUT NUMBER
								 ,p_job_fleet IN VARCHAR2
								 ,p_company IN VARCHAR2
								 ,p_location IN VARCHAR2
								 ,p_activity IN VARCHAR2 ) IS

  CURSOR C_Check_Existing (b_org_id NUMBER) IS
  SELECT job_fleet
  ,		 company
  ,		 location
  ,		 activity
  FROM	 XXCRH_JOB_FLEET_LIST
  WHERE	 job_fleet = p_job_fleet
  AND	 org_id = b_org_id;

  v_org_id				  NUMBER;
  v_existing			  VARCHAR2(1);
  v_error 			   	  VARCHAR2(2000);
  v_progress 			  VARCHAR2(10);

BEGIN

  -- Get the Org ID.
  SELECT to_number(decode(substrb(userenv('CLIENT_INFO'),1,1),
  		 ' ', null,substrb(userenv('CLIENT_INFO'),1,10)))
  INTO   v_org_id
  FROM   dual;

  -- Initialise v_existing variable.
  v_existing := 'N';

  -- Check if the Job/Fleet is existing for this org.
  FOR i IN C_Check_Existing (v_org_id) LOOP
    v_existing := 'Y';
  END LOOP;

  -- If the Job/Fleet is existing for this org, overwrite the values.
  IF v_existing = 'Y' THEN
    UPDATE XXCRH_JOB_FLEET_LIST
	SET    company = p_company
	,	   location = p_location
	,	   activity = p_activity
	WHERE  org_id = v_org_id
	AND	   job_fleet = p_job_fleet;

  -- If this is a new Job/Fleet for this org, insert new record into custom table.
  ELSE
    INSERT INTO XXCRH_JOB_FLEET_LIST (Org_ID, Job_Fleet, Company, Location, Activity) VALUES
	(v_org_id, p_job_fleet, p_company, p_location, p_activity);

  END IF;

EXCEPTION WHEN OTHERS THEN
  v_error := sqlerrm;
  WriteLog(v_error, 'XXCRH_PO_WF_PO_CHARGE_ACC.Insert_Fleet_Locations', v_progress);
  fnd_file.put_line(FND_FILE.LOG, v_error);

END Insert_Fleet_Locations;

*/

procedure expense  ( itemtype        in  varchar2,
                     itemkey         in  varchar2,
                     actid           in  number,
                     funcmode        in  varchar2,
                     result          out NOCOPY varchar2    )
is
	x_progress	varchar2(100);
	success		varchar2(2);
	x_dest_org_id	number;
	x_item_id	number;
	x_expense_acc   number;
	x_status	varchar2(1); /* B1548597 OPM changes */
	x_vendor_site_id number; /* B1548597 OPM changes */

	dummy   VARCHAR2(40);
	ret     BOOLEAN;
begin

  x_progress := 'XX_PO_WF_PO_CHARGE_ACC.expense: 01';
  IF (g_po_wf_debug = 'Y') THEN
     /* DEBUG */  PO_WF_DEBUG_PKG.insert_debug(itemtype,itemkey,x_progress);
  END IF;


  -- Do nothing in cancel or timeout mode
  --
  if (funcmode <> wf_engine.eng_run) then

      result := wf_engine.eng_null;
      return;

  end if;

  x_dest_org_id := po_wf_util_pkg.GetItemAttrNumber ( itemtype => itemtype,
                                   	         itemkey  => itemkey,
                            	 	         aname    => 'DESTINATION_ORGANIZATION_ID');

  x_item_id     :=  po_wf_util_pkg.GetItemAttrNumber ( itemtype => itemtype,
                                   	       	  itemkey  => itemkey,
                            	 	          aname    => 'ITEM_ID');

  /* Start DEBUG
  If (debug_acc_generator_wf) then
		dbms_output.put_line ('Procedure PO_WF_PO_CHARGE_ACC.expense');
 		dbms_output.put_line ('DESTINATION_ORGANIZATION_ID: ' || to_char(x_dest_org_id));
		dbms_output.put_line ('ITEM_ID: ' || to_char(x_item_id));
  end if;
  End DEBUG */

/* B1548597 OPM changes start */

  ret := fnd_installation.get_app_info('GMI', X_status, dummy, dummy);

  if ( X_status = 'I' and PO_GML_DB_COMMON.check_process_org(x_dest_org_id) = 'Y')
  then
	 x_vendor_site_id :=  po_wf_util_pkg.GetItemAttrNumber ( itemtype => itemtype,
                                               itemkey  => itemkey,
                                               aname    => 'VENDOR_SITE_ID');

	GML_ACCT_GENERATE.GENERATE_OPM_ACCT('EXPENSE','', '', x_dest_org_id, x_item_id, x_vendor_site_id, x_expense_acc);
	If (x_expense_acc is null) then
		success := 'N';
	end if;
  ELSE

/* End B1548597 OPM changes */

  begin

	  select EXPENSE_ACCOUNT into x_expense_acc
	  from MTL_SYSTEM_ITEMS
	  where organization_id = x_dest_org_id
	  and inventory_item_id = x_item_id;

/*Bug 1319679
         If the default expense account for the item is null
         we should be returning 'N' for Success ie the result
         of the workflow process should be COMPLETE:FAILURE
*/

         if (x_expense_acc is null) then
            success := 'N';
         end if;

  exception
	  WHEN NO_DATA_FOUND THEN
	    success := 'N';
  end;
END IF; /* B1548597 OPM Changes */

  if (success = 'N') then
	result := 'COMPLETE:FAILURE';

    IF (g_po_wf_debug = 'Y') THEN
      PO_WF_DEBUG_PKG.insert_debug(itemtype, itemkey,
             'XX_PO_WF_PO_CHARGE_ACC.expense result='||result);
    END IF;

	return;
  end if;

  po_wf_util_pkg.SetItemAttrNumber  (  itemtype=>itemtype,
                                  itemkey=>itemkey,
                                  aname=>'TEMP_ACCOUNT_ID',
                                  avalue=>x_expense_acc );

  result := 'COMPLETE:SUCCESS';
  -- Bug 3703469: Clear any previous messages in the stack if
  -- account is generated successfully
  fnd_message.clear;
  RETURN;

  IF (g_po_wf_debug = 'Y') THEN
    po_wf_debug_pkg.insert_debug(itemtype, itemkey,
             'XX_PO_WF_PO_CHARGE_ACC.expense x_expense_acc='||x_expense_acc);
  END IF;

EXCEPTION
  when others then
    	wf_core.context('XX_PO_WF_PO_CHARGE_ACC','expense',x_progress);

        /* Start DEBUG
    	If (debug_acc_generator_wf) then
 		dbms_output.put_line (' --> EXCEPTION <-- in PO_WF_PO_CHARGE_ACC.expense');
    	end if;
	End DEBUG */

        raise;

end expense;

PROCEDURE WriteLog (p_comments IN VARCHAR2
				   ,p_procedure_name IN VARCHAR2
				   ,p_progress IN VARCHAR2) IS

PRAGMA autonomous_transaction;

BEGIN
  INSERT INTO xx_debug (create_date, comments, procedure_name, progress) VALUES
  		 	  			  (SYSDATE, p_comments, p_procedure_name, p_progress);
  COMMIT;
END WriteLog;

END XX_PO_WF_PO_CHARGE_ACC;
/
