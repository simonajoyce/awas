package oracle.apps.awcust.person.server;

import java.sql.CallableStatement;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;

import oracle.jbo.Row;
import oracle.jbo.Transaction;
import oracle.jbo.domain.Date;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmployeeAssignmentsAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public EmployeeAssignmentsAMImpl() {
    }

    /**Container's getter for EmployeeAssignmentsVO1
     */
    public OAViewObjectImpl getEmployeeAssignmentsVO1() {
        return (OAViewObjectImpl)findViewObject("EmployeeAssignmentsVO1");
    }

    /**Container's getter for EmpAssignmentsCreateVO1
     */
    public OAViewObjectImpl getEmpAssignmentsCreateVO1() {
    
        return (OAViewObjectImpl)findViewObject("EmpAssignmentsCreateVO1");
    
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("oracle.apps.awcust.person.server", /* package name */
      "EmployeeAssignmentsAMLocal" /* Configuration Name */);
    }
    
    /**
     * createNewAssignment Module
     * @param paramPersonId
     */
    public void createNewAssignment(String paramPersonId, String paramEmployeeName){
        //create an instance of the view object and call it vo
           //EmpAssignmentsCreateVOImpl vo = getEmpAssignmentsCreateVO1();
        OAViewObjectImpl vo = getEmpAssignmentsCreateVO1();
            
        
           // we need to do this on a VO that has not been queired before we insert
        // our first ro. We don't want to do it for subsequent inserts
        if(vo.getFetchedRowCount() ==0) {
          vo.setMaxFetchSize(0);
        }
        
        // we are now going to create a record in the view object
        Row row = vo.createRow();
        
        row.setAttribute("PersonId",paramPersonId);
        row.setAttribute("EmployeeName",paramEmployeeName);
        
        //Now we will call the standard method to insert the record
        vo.insertRow(row);
        
        //Required as per OA Framework Model coding standard M69
        row.setNewRowState(Row.STATUS_INITIALIZED);
        
    }
     /**
     * updateAssignment Module
     * @param paramPersonId
     * @param paramAssignmentId
     */
    public void updateAssignment(String paramPersonId, 
                                 String paramAssignmentId,
                                 String paramOffice,
                                 String paramCostCentre,
                                 String paramDepartment,
                                 String paramLineManager,
                                 String paramJobTitle,
                                 String paramJobLevel,
                                 String paramEmployeeType,
                                 String paramUserProfile,
                                 String paramEmployeeName){
        //create an instance of the view object and call it vo
           
        OAViewObjectImpl vo = getEmpAssignmentsCreateVO1();
            
        
        // we need to do this on a VO that has not been queired before we insert
        // our first ro. We don't want to do it for subsequent inserts
        if(vo.getFetchedRowCount() ==0) {
          vo.setMaxFetchSize(0);
        }
        
        // we are now going to create a record in the view object
        Row row = vo.createRow();
        
        row.setAttribute("PersonId",paramPersonId);
        row.setAttribute("Office",paramOffice);
        row.setAttribute("CostCentre",paramCostCentre);
        row.setAttribute("Department",paramDepartment);
        row.setAttribute("LineManager",paramLineManager);
        row.setAttribute("JobTitle",paramJobTitle);
        row.setAttribute("JobLevel",paramJobLevel);
        row.setAttribute("EmployeeType",paramEmployeeType);
        row.setAttribute("UserProfile",paramUserProfile);
        row.setAttribute("EmployeeName",paramEmployeeName);
        
        
        
        
        //Now we will call the standard method to insert the record
        vo.insertRow(row);
        
        //Required as per OA Framework Model coding standard M69
        row.setNewRowState(Row.STATUS_INITIALIZED);
        
    }
 /**
  * rollbackAssignment method
  */
  public void rollBackAssignment() {
     getTransaction().rollback();
    //Transaction txn = getTransaction();
     //if (txn.isDirty()) {
//       txn.rollback();
        
  }
    /**
     * commitTransaction method
     */
     public void commitTransaction(){
         //commit the transaction
         
             getTransaction().commit();    
         
         
     }

    /**
     * End Date Old Assignment
     */
     public void endAssignment(String paramAssignmentId, String paramEndDate){
         
         OADBTransaction txn = (OADBTransaction)getTransaction();
         String stmt = "BEGIN " +
                       " UPDATE XX_EMPLOYEE_ASSIGNMENTS" + 
                       /*" SET END_DATE = to_char(to_date('" + paramEndDate +  "','mm/dd/yy HH24:MI:SS'),'dd/mmm/yyyy')" +  */
                       " SET END_DATE = (SELECT START_DATE FROM XX_EMPLOYEE_ASSIGNMENTS WHERE ASSIGNMENT_ID = " + paramAssignmentId + ")" +
                       " WHERE ASSIGNMENT_ID <> " + paramAssignmentId + 
                       " AND PERSON_ID = (SELECT PERSON_ID from XX_EMPLOYEE_ASSIGNMENTS " +
                       " WHERE ASSIGNMENT_ID = " + paramAssignmentId + ")" +
                       " AND END_DATE IS NULL;" + 
                       " COMMIT;" +
                       " END;";
        
        try {
            CallableStatement cs =txn.createCallableStatement(stmt,1);
            cs.execute();
            cs.close();
        }
        
        catch(Exception exception1) {
            throw OAException.wrapperException(exception1);
        }
        
       // throw new OAException("Complete transaction sucessfully.", OAException.INFORMATION);
                                
     }
    
}

